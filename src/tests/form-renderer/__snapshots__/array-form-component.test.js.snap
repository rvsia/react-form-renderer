// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renderForm function should render array field correctly 1`] = `
<ContextWrapper>
  <ReactFinalForm
    initialValues={Object {}}
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper>
      <FieldWrapper
        component={[Function]}
        componentType="field-array"
        fields={
          Array [
            Object {
              "component": "text-field",
              "label": "foo",
              "name": "nested component",
            },
          ]
        }
        formOptions={
          Object {
            "renderForm": [Function],
          }
        }
        key="bar"
        name="foo"
        validate={
          Array [
            undefined,
          ]
        }
      >
        <_class
          FieldProvider={[Function]}
          arrayValidator={[Function]}
          component={[Function]}
          fields={
            Array [
              Object {
                "component": "text-field",
                "label": "foo",
                "name": "nested component",
              },
            ]
          }
          formOptions={
            Object {
              "hasFixedItems": false,
              "renderForm": [Function],
            }
          }
          name="foo"
        >
          <Field
            FieldProvider={[Function]}
            arrayValidator={[Function]}
            component={[Function]}
            fields={
              Array [
                Object {
                  "component": "text-field",
                  "label": "foo",
                  "name": "nested component",
                },
              ]
            }
            formOptions={
              Object {
                "hasFixedItems": false,
                "renderForm": [Function],
              }
            }
            format={[Function]}
            name="foo"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
          >
            <Component
              FieldProvider={[Function]}
              arrayValidator={[Function]}
              fields={
                Array [
                  Object {
                    "component": "text-field",
                    "label": "foo",
                    "name": "nested component",
                  },
                ]
              }
              formOptions={
                Object {
                  "hasFixedItems": false,
                  "renderForm": [Function],
                }
              }
              input={
                Object {
                  "name": "foo",
                  "onBlur": [Function],
                  "onChange": [Function],
                  "onFocus": [Function],
                  "value": "",
                }
              }
              meta={
                Object {
                  "active": false,
                  "data": Object {},
                  "dirty": false,
                  "dirtySinceLastSubmit": false,
                  "error": undefined,
                  "initial": undefined,
                  "invalid": false,
                  "pristine": true,
                  "submitError": undefined,
                  "submitFailed": false,
                  "submitSucceeded": false,
                  "submitting": false,
                  "touched": false,
                  "valid": true,
                  "visited": false,
                }
              }
            >
              <renderArrayField
                FieldProvider={[Function]}
                arrayValidator={[Function]}
                fields={
                  Array [
                    Object {
                      "component": "text-field",
                      "label": "foo",
                      "name": "nested component",
                    },
                  ]
                }
                formOptions={
                  Object {
                    "hasFixedItems": false,
                    "renderForm": [Function],
                  }
                }
                input={
                  Object {
                    "name": "foo",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "value": "",
                  }
                }
                meta={
                  Object {
                    "active": false,
                    "data": Object {},
                    "dirty": false,
                    "dirtySinceLastSubmit": false,
                    "error": undefined,
                    "initial": undefined,
                    "invalid": false,
                    "pristine": true,
                    "submitError": undefined,
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "touched": false,
                    "valid": true,
                    "visited": false,
                  }
                }
                validate={Array []}
              >
                <DynamicArray
                  FieldProvider={[Function]}
                  arrayValidator={[Function]}
                  fieldKey="foo"
                  fields={
                    Array [
                      Object {
                        "component": "text-field",
                        "label": "foo",
                        "name": "nested component",
                      },
                    ]
                  }
                  formOptions={
                    Object {
                      "hasFixedItems": false,
                      "renderForm": [Function],
                    }
                  }
                  input={
                    Object {
                      "name": "foo",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "value": "",
                    }
                  }
                  meta={
                    Object {
                      "active": false,
                      "data": Object {},
                      "dirty": false,
                      "dirtySinceLastSubmit": false,
                      "error": undefined,
                      "initial": undefined,
                      "invalid": false,
                      "pristine": true,
                      "submitError": undefined,
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "touched": false,
                      "valid": true,
                      "visited": false,
                    }
                  }
                  renderForm={[Function]}
                  validate={Array []}
                >
                  <_class
                    key="foo"
                    name="foo"
                    validate={[Function]}
                  >
                    <ReactFinalFormFieldArray(4.8.1)(2.0.1)
                      name="foo"
                      reactFinalForm={
                        Object {
                          "batch": [Function],
                          "blur": [Function],
                          "change": [Function],
                          "focus": [Function],
                          "getFieldState": [Function],
                          "getRegisteredFields": [Function],
                          "getState": [Function],
                          "initialize": [Function],
                          "isValidationPaused": [Function],
                          "mutators": Object {
                            "insert": [Function],
                            "move": [Function],
                            "pop": [Function],
                            "push": [Function],
                            "remove": [Function],
                            "shift": [Function],
                            "swap": [Function],
                            "unshift": [Function],
                            "update": [Function],
                          },
                          "pauseValidation": [Function],
                          "registerField": [Function],
                          "reset": [Function],
                          "resumeValidation": [Function],
                          "setConfig": [Function],
                          "submit": [Function],
                          "subscribe": [Function],
                        }
                      }
                      validate={[Function]}
                    >
                      <Col
                        xs={11}
                      >
                        <div />
                      </Col>
                      <Col
                        className="final-form-array-add-container"
                        xs={1}
                      >
                        <div>
                          <FormGroup>
                            <div>
                              <ButtonGroup
                                className="pull-right"
                              >
                                <div>
                                  <Button
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <button
                                      onClick={[Function]}
                                      type="button"
                                    />
                                  </Button>
                                </div>
                              </ButtonGroup>
                            </div>
                          </FormGroup>
                        </div>
                      </Col>
                    </ReactFinalFormFieldArray(4.8.1)(2.0.1)>
                  </_class>
                </DynamicArray>
              </renderArrayField>
            </Component>
          </Field>
        </_class>
      </FieldWrapper>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;

exports[`renderForm function should render fixed array field correctly 1`] = `
<ContextWrapper>
  <ReactFinalForm
    initialValues={Object {}}
    mutators={
      Object {
        "insert": [Function],
        "move": [Function],
        "pop": [Function],
        "push": [Function],
        "remove": [Function],
        "shift": [Function],
        "swap": [Function],
        "unshift": [Function],
        "update": [Function],
      }
    }
    onSubmit={[MockFunction]}
  >
    <FormConditionWrapper>
      <FieldWrapper
        additionalItems={
          Object {
            "component": "text-field",
            "fields": Array [],
            "key": 1,
            "name": "foo",
          }
        }
        component={[Function]}
        componentType="fixed-list"
        description="description"
        fields={
          Array [
            Object {
              "component": "text-field",
              "label": "foo",
              "name": "nested component",
            },
          ]
        }
        formOptions={
          Object {
            "renderForm": [Function],
          }
        }
        key="bar"
        name="foo"
        title="Title"
        validate={
          Array [
            undefined,
          ]
        }
      >
        <_class
          FieldProvider={[Function]}
          additionalItems={
            Object {
              "component": "text-field",
              "fields": Array [],
              "key": 1,
              "name": "foo",
            }
          }
          arrayValidator={[Function]}
          component={[Function]}
          description="description"
          fields={
            Array [
              Object {
                "component": "text-field",
                "label": "foo",
                "name": "nested component",
              },
            ]
          }
          formOptions={
            Object {
              "hasFixedItems": true,
              "renderForm": [Function],
            }
          }
          name="foo"
          title="Title"
        >
          <Field
            FieldProvider={[Function]}
            additionalItems={
              Object {
                "component": "text-field",
                "fields": Array [],
                "key": 1,
                "name": "foo",
              }
            }
            arrayValidator={[Function]}
            component={[Function]}
            description="description"
            fields={
              Array [
                Object {
                  "component": "text-field",
                  "label": "foo",
                  "name": "nested component",
                },
              ]
            }
            formOptions={
              Object {
                "hasFixedItems": true,
                "renderForm": [Function],
              }
            }
            format={[Function]}
            name="foo"
            parse={[Function]}
            reactFinalForm={
              Object {
                "batch": [Function],
                "blur": [Function],
                "change": [Function],
                "focus": [Function],
                "getFieldState": [Function],
                "getRegisteredFields": [Function],
                "getState": [Function],
                "initialize": [Function],
                "isValidationPaused": [Function],
                "mutators": Object {
                  "insert": [Function],
                  "move": [Function],
                  "pop": [Function],
                  "push": [Function],
                  "remove": [Function],
                  "shift": [Function],
                  "swap": [Function],
                  "unshift": [Function],
                  "update": [Function],
                },
                "pauseValidation": [Function],
                "registerField": [Function],
                "reset": [Function],
                "resumeValidation": [Function],
                "setConfig": [Function],
                "submit": [Function],
                "subscribe": [Function],
              }
            }
            title="Title"
          >
            <Component
              FieldProvider={[Function]}
              additionalItems={
                Object {
                  "component": "text-field",
                  "fields": Array [],
                  "key": 1,
                  "name": "foo",
                }
              }
              arrayValidator={[Function]}
              description="description"
              fields={
                Array [
                  Object {
                    "component": "text-field",
                    "label": "foo",
                    "name": "nested component",
                  },
                ]
              }
              formOptions={
                Object {
                  "hasFixedItems": true,
                  "renderForm": [Function],
                }
              }
              input={
                Object {
                  "name": "foo",
                  "onBlur": [Function],
                  "onChange": [Function],
                  "onFocus": [Function],
                  "value": "",
                }
              }
              meta={
                Object {
                  "active": false,
                  "data": Object {},
                  "dirty": false,
                  "dirtySinceLastSubmit": false,
                  "error": undefined,
                  "initial": undefined,
                  "invalid": false,
                  "pristine": true,
                  "submitError": undefined,
                  "submitFailed": false,
                  "submitSucceeded": false,
                  "submitting": false,
                  "touched": false,
                  "valid": true,
                  "visited": false,
                }
              }
              title="Title"
            >
              <renderArrayField
                FieldProvider={[Function]}
                additionalItems={
                  Object {
                    "component": "text-field",
                    "fields": Array [],
                    "key": 1,
                    "name": "foo",
                  }
                }
                arrayValidator={[Function]}
                description="description"
                fields={
                  Array [
                    Object {
                      "component": "text-field",
                      "label": "foo",
                      "name": "nested component",
                    },
                  ]
                }
                formOptions={
                  Object {
                    "hasFixedItems": true,
                    "renderForm": [Function],
                  }
                }
                input={
                  Object {
                    "name": "foo",
                    "onBlur": [Function],
                    "onChange": [Function],
                    "onFocus": [Function],
                    "value": "",
                  }
                }
                meta={
                  Object {
                    "active": false,
                    "data": Object {},
                    "dirty": false,
                    "dirtySinceLastSubmit": false,
                    "error": undefined,
                    "initial": undefined,
                    "invalid": false,
                    "pristine": true,
                    "submitError": undefined,
                    "submitFailed": false,
                    "submitSucceeded": false,
                    "submitting": false,
                    "touched": false,
                    "valid": true,
                    "visited": false,
                  }
                }
                title="Title"
                validate={Array []}
              >
                <FixedArrayField
                  FieldProvider={[Function]}
                  additionalItems={
                    Object {
                      "component": "text-field",
                      "fields": Array [],
                      "key": 1,
                      "name": "foo",
                    }
                  }
                  arrayValidator={[Function]}
                  description="description"
                  fields={
                    Array [
                      Object {
                        "component": "text-field",
                        "label": "foo",
                        "name": "nested component",
                      },
                    ]
                  }
                  formOptions={
                    Object {
                      "hasFixedItems": true,
                      "renderForm": [Function],
                    }
                  }
                  input={
                    Object {
                      "name": "foo",
                      "onBlur": [Function],
                      "onChange": [Function],
                      "onFocus": [Function],
                      "value": "",
                    }
                  }
                  meta={
                    Object {
                      "active": false,
                      "data": Object {},
                      "dirty": false,
                      "dirtySinceLastSubmit": false,
                      "error": undefined,
                      "initial": undefined,
                      "invalid": false,
                      "pristine": true,
                      "submitError": undefined,
                      "submitFailed": false,
                      "submitSucceeded": false,
                      "submitting": false,
                      "touched": false,
                      "valid": true,
                      "visited": false,
                    }
                  }
                  renderForm={[Function]}
                  title="Title"
                  validate={Array []}
                >
                  <Col
                    xs={12}
                  >
                    <div>
                      <h3>
                        Title
                      </h3>
                    </div>
                  </Col>
                  <Col
                    xs={12}
                  >
                    <div>
                      <p>
                        description
                      </p>
                    </div>
                  </Col>
                  <FormConditionWrapper>
                    <FieldWrapper
                      component={[Function]}
                      componentType="text-field"
                      formOptions={
                        Object {
                          "renderForm": [Function],
                        }
                      }
                      label="foo"
                      name="nested component"
                      validate={
                        Array [
                          undefined,
                        ]
                      }
                    >
                      <_class
                        FieldProvider={[Function]}
                        component={[Function]}
                        formOptions={
                          Object {
                            "renderForm": [Function],
                          }
                        }
                        label="foo"
                        name="nested component"
                        validate={[Function]}
                      >
                        <Field
                          FieldProvider={[Function]}
                          component={[Function]}
                          formOptions={
                            Object {
                              "renderForm": [Function],
                            }
                          }
                          format={[Function]}
                          label="foo"
                          name="nested component"
                          parse={[Function]}
                          reactFinalForm={
                            Object {
                              "batch": [Function],
                              "blur": [Function],
                              "change": [Function],
                              "focus": [Function],
                              "getFieldState": [Function],
                              "getRegisteredFields": [Function],
                              "getState": [Function],
                              "initialize": [Function],
                              "isValidationPaused": [Function],
                              "mutators": Object {
                                "insert": [Function],
                                "move": [Function],
                                "pop": [Function],
                                "push": [Function],
                                "remove": [Function],
                                "shift": [Function],
                                "swap": [Function],
                                "unshift": [Function],
                                "update": [Function],
                              },
                              "pauseValidation": [Function],
                              "registerField": [Function],
                              "reset": [Function],
                              "resumeValidation": [Function],
                              "setConfig": [Function],
                              "submit": [Function],
                              "subscribe": [Function],
                            }
                          }
                          validate={[Function]}
                        >
                          <Component
                            FieldProvider={[Function]}
                            formOptions={
                              Object {
                                "renderForm": [Function],
                              }
                            }
                            input={
                              Object {
                                "name": "nested component",
                                "onBlur": [Function],
                                "onChange": [Function],
                                "onFocus": [Function],
                                "value": "",
                              }
                            }
                            label="foo"
                            meta={
                              Object {
                                "active": false,
                                "data": Object {},
                                "dirty": false,
                                "dirtySinceLastSubmit": false,
                                "error": undefined,
                                "initial": undefined,
                                "invalid": false,
                                "pristine": true,
                                "submitError": undefined,
                                "submitFailed": false,
                                "submitSucceeded": false,
                                "submitting": false,
                                "touched": false,
                                "valid": true,
                                "visited": false,
                              }
                            }
                          >
                            <div
                              className="nested-item"
                            >
                              Text field
                            </div>
                          </Component>
                        </Field>
                      </_class>
                    </FieldWrapper>
                  </FormConditionWrapper>
                  <FormConditionWrapper>
                    <FieldWrapper
                      component={[Function]}
                      componentType="text-field"
                      fields={Array []}
                      formOptions={
                        Object {
                          "renderForm": [Function],
                        }
                      }
                      key="1"
                      name="foo"
                      validate={
                        Array [
                          undefined,
                        ]
                      }
                    >
                      <_class
                        FieldProvider={[Function]}
                        component={[Function]}
                        fields={Array []}
                        formOptions={
                          Object {
                            "renderForm": [Function],
                          }
                        }
                        name="foo"
                        validate={[Function]}
                      >
                        <Field
                          FieldProvider={[Function]}
                          component={[Function]}
                          fields={Array []}
                          formOptions={
                            Object {
                              "renderForm": [Function],
                            }
                          }
                          format={[Function]}
                          name="foo"
                          parse={[Function]}
                          reactFinalForm={
                            Object {
                              "batch": [Function],
                              "blur": [Function],
                              "change": [Function],
                              "focus": [Function],
                              "getFieldState": [Function],
                              "getRegisteredFields": [Function],
                              "getState": [Function],
                              "initialize": [Function],
                              "isValidationPaused": [Function],
                              "mutators": Object {
                                "insert": [Function],
                                "move": [Function],
                                "pop": [Function],
                                "push": [Function],
                                "remove": [Function],
                                "shift": [Function],
                                "swap": [Function],
                                "unshift": [Function],
                                "update": [Function],
                              },
                              "pauseValidation": [Function],
                              "registerField": [Function],
                              "reset": [Function],
                              "resumeValidation": [Function],
                              "setConfig": [Function],
                              "submit": [Function],
                              "subscribe": [Function],
                            }
                          }
                          validate={[Function]}
                        >
                          <Component
                            FieldProvider={[Function]}
                            fields={Array []}
                            formOptions={
                              Object {
                                "renderForm": [Function],
                              }
                            }
                            input={
                              Object {
                                "name": "foo",
                                "onBlur": [Function],
                                "onChange": [Function],
                                "onFocus": [Function],
                                "value": "",
                              }
                            }
                            meta={
                              Object {
                                "active": false,
                                "data": Object {},
                                "dirty": false,
                                "dirtySinceLastSubmit": false,
                                "error": undefined,
                                "initial": undefined,
                                "invalid": false,
                                "pristine": true,
                                "submitError": undefined,
                                "submitFailed": false,
                                "submitSucceeded": false,
                                "submitting": false,
                                "touched": false,
                                "valid": true,
                                "visited": false,
                              }
                            }
                          >
                            <div
                              className="nested-item"
                            >
                              Text field
                            </div>
                          </Component>
                        </Field>
                      </_class>
                    </FieldWrapper>
                  </FormConditionWrapper>
                </FixedArrayField>
              </renderArrayField>
            </Component>
          </Field>
        </_class>
      </FieldWrapper>
    </FormConditionWrapper>
  </ReactFinalForm>
</ContextWrapper>
`;
